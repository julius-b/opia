import java.time.ZonedDateTime;
import java.util.UUID;

CREATE TABLE IF NOT EXISTS auth_session (
  id TEXT AS UUID PRIMARY KEY NOT NULL,
  actor_id TEXT AS UUID NOT NULL,
  installation_id TEXT AS UUID NOT NULL,
  ioid TEXT AS UUID NOT NULL,
  secret_update_id TEXT AS UUID NOT NULL,
  refresh_token text NOT NULL,
  access_token text NOT NULL,
  created_at TEXT AS ZonedDateTime NOT NULL,
  deleted_at TEXT AS ZonedDateTime
);

insert:
INSERT OR REPLACE INTO auth_session (id, actor_id, installation_id, ioid, secret_update_id, refresh_token, access_token, created_at) VALUES ?;
-- (?, ?, ?, ?, ?, ?, ?, ?)

getLatest:
SELECT * FROM auth_session WHERE created_at = (SELECT max(created_at) FROM auth_session) AND deleted_at IS NULL;

getLatestByIOID:
SELECT * FROM auth_session WHERE created_at = (SELECT max(created_at) FROM auth_session) AND ioid = :ioid AND deleted_at IS NULL;

-- select rows with maximum values in each group
-- should return latest auth_session per ioid
getLatestByDistinctIOID:
SELECT actor_id, ioid, max(created_at) FROM auth_session WHERE deleted_at IS NULL GROUP BY ioid;

truncate:
DELETE FROM auth_session;

-- since deleted_at is just TEXT, better to generate this in code
deleteAll:
UPDATE auth_session SET deleted_at = ?;
